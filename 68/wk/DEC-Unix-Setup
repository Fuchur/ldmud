Subject: DEC UNIX4.0 compilation failure
From: Alex <at16@st-andrews.ac.uk>
Date: Wed, 24 Mar 1999 18:09:46 +0000 (GMT)


Hiya,

Here's Alex@TubMud, with details of compilation problems
under the following specs:


uname -a   gives you:
OSF1 dec3300.physik.fu-berlin.de V4.0 464 alpha   

gcc -v     gives you:
gcc version 2.7.2.2


My yacc version isn't exactly new, but it isn't bison
OR byacc, for that matter, for all I know. It worked fine
with all versions before and including @141.

The OS is pretty much unodified from its original status.
I have the bootrun, Makefile and machine.h attached to
this mail. Basically, I did the same thing as with @141,
which needed nothing apart from ./configure and make to
run. (I didn't even change the paths in the Makefile, so
any 'human error' was excluded, I hope :)

Well, there you go. Thanks, and keep up the fantastic
work with the driver.

Alex [btw, apologies it's all in one big mail, I can't
      actually attach anything right now from this host]


--- Makefile ---

# Generated automatically from Makefile.in by configure.
# These lines are needed on some machines.
MAKE=make
SHELL=/bin/sh
INSTALL=/bin/installbsd -c
#
CC=gcc
#
YACC = yacc
YACCTAB = y.tab.
#
RM = rm -f
MV = mv
CP = cp
#
# Chose one of these mallocs:
# Satoria's malloc. Uses little memory. With FAST_FIT, it is also one of the
# fastest. Required for garbage collection.
MALLOC=smalloc
# must not #define SBRK_OK without static linking on __RS6000__
# How can static linking be done?
#
# Use the standard malloc on your system:
#MALLOC=sysmalloc
#
# Set MUD_LIB to the directory which contains the mud data. Was formerly
# defined in config.h !
MUD_LIB = /home/tubmud/mudlib
#
# Set BINDIR to the directory where you want to install the executables.
BINDIR = /home/tubmud/mudbin
#
#PROFIL= -DOPCPROF -DVERBOSE_OPCPROF
#PROFIL=-p -DMARK
#PROFIL=-pg
PROFIL=
#Enable warnings from the compiler, if wanted.
WARN= # no warning options - will work with all compilers :-)
#WARN= -Wall -Wshadow -Dlint
#WARN= -Wall -Wshadow -Wno-parentheses # gcc settings
#
# Optimization and source level debugging options.
# adding a -fomit-frame-pointer on the NeXT (gcc version 1.93 (68k, MIT syntax))
# will corrupt the driver.
OPTIMIZE = -O4 -g -fstrength-reduce -fno-force-mem -fno-force-addr -fno-inline-functions -fomit-frame-pointer # high optimization
#OPTIMIZE= -O4 -g -fstrength-reduce -fno-force-mem -fno-force-addr -fno-inline-functions # for better debugging
#OPTIMIZE= -g # no optimization; for frequent recompilations.
#
# debugging options: [-DDEBUG] [-DYYDEBUG|-DYYDEBUG=1] [-DTRACE_CODE]
# -DDEBUG: Enable run time debugging. It will use more time and space.
# When the flag is changed, be sure to recompile everything.
# Simply comment out this line if not wanted.
# If you change anything in the source, you are strongly encouraged to have
# DEBUG defined.
# If you will not change anything, you are still encouraged to have
# it defined, if you want to locate any game driver bugs.
DEBUG=-DDEBUG -DTRACE_CODE
#DEBUG=
#
MPATH=-DMUD_LIB='"$(MUD_LIB)"' -DBINDIR='"$(BINDIR)"'
#
CFLAGS=  $(OPTIMIZE) $(DEBUG) -DMALLOC_$(MALLOC) $(WARN) $(MPATH) $(PROFIL)
#
LIBS= -lm
#
LDFLAGS=
#
#Note that, if you use smalloc with SBRK_OK(which is the default), and
#don't link statically, it could happen that the system malloc is linked
#along with the one from smalloc; this combination is bound to cause crashes.
MFLAGS = "BINDIR=$(BINDIR)" "MUD_LIB=$(MUD_LIB)"
#
SRC = access_check.c array.c backend.c call_out.c closure.c comm.c \
      dumpstat.c ed.c efuns.c gcollect.c hash.c interpret.c lang.c lex.c \
      main.c mapping.c object.c otable.c parse.c parse_old.c port.c \
      ptrtable.c \
      random.c regexp.c rxcache.c simulate.c simul_efun.c stralloc.c \
      sprintf.c swap.c wiz_list.c $(MALLOC).c
OBJ=lang.o lex.o main.o interpret.o simulate.o object.o backend.o array.o\
    comm.o ed.o regexp.o mapping.o wiz_list.o swap.o $(MALLOC).o\
    call_out.o otable.o dumpstat.o stralloc.o hash.o port.o\
    access_check.o parse_old.o parse.o simul_efun.o sprintf.o\
    gcollect.o closure.o random.o rxcache.o efuns.o ptrtable.o 

driver: $(OBJ)
	$(CC) $(OPTIMIZE) $(LDFLAGS) $(OBJ) -o $@ $(LIBS)

install: driver
	$(INSTALL) -c $? $(BINDIR)/parse

install-utils:
	(cd util; $(MAKE) $(MFLAGS) install)

utils: 
	(cd util; $(MAKE) $(MFLAGS))

parse: driver
	-$(MV) parse parse.old
	$(CP) driver parse

lint: *.c
	lint *.c

clean:
	$(RM) $(YACCTAB)h $(YACCTAB)c make_func.c *.o make_func
	$(RM) efun_defs.c instrs.h lang.y lang.h lang.c y.output tags TAGS
	$(RM) parse core mudlib/core mudlib/debug.log lpmud.log driver
	(cd util ; echo "Cleaning in util." ; $(MAKE) clean)

distclean: clean
	$(RM) driver config.status machine.h Makefile

tags: $(SRC)
	ctags $(SRC)

TAGS: $(SRC)
	etags $(SRC)

make_func.c: make_func.y
	$(YACC) make_func.y
	$(MV) $(YACCTAB)c make_func.c
	

make_func.o : make_func.c driver.h config.h machine.h port.h
	  $(CC) $(CFLAGS) -DYACC='"$(YACC)"' -c make_func.c

make_func: make_func.o hash.o exec.h
	$(CC) $(OPTIMIZE) $(LDFLAGS) make_func.o hash.o -o make_func

lang.y efun_defs.c instrs.h: func_spec make_func prolang.y config.h
	$(RM) efun_defs.c
	$(RM) lang.y
	./make_func

lang.c lang.h: lang.y
	$(YACC) -d -v lang.y
	$(MV) $(YACCTAB)c lang.c
	
	$(MV) $(YACCTAB)h lang.h

$(MALLOC).o : $(MALLOC).c driver.h config.h machine.h port.h
	$(RM) smalloc.o
	$(RM) sysmalloc.o
	$(CC) $(CFLAGS) -c $(MALLOC).c

#--------------------------------------------------------
# Dependencies, manual and automatic.

array.o : instrs.h lang.h

closure.o : instrs.h lang.h

dumpstat.o : instrs.h lang.h

gcollect.o : instrs.h lang.h

interpret.o : instrs.h lang.h

lang.o : driver.h config.h machine.h lex.h interpret.h object.h \
    instrs.h port.h switch.h stralloc.h

lex.o : instrs.h lang.h efun_defs.c

simul_efun.o : instrs.h lang.h

simulate.o : instrs.h

sprintf.o : instrs.h

# --- DO NOT MODIFY THIS LINE -- AUTO-DEPENDS FOLLOW ---
access_check.o : filestat.h comm.h access_check.h driver.h sent.h object.h \
    interpret.h config.h port.h machine.h exec.h datatypes.h \
    hosts/amiga/patchfloat.h

array.o : wiz_list.h swap.h stralloc.h simulate.h rxcache.h regexp.h \
    prolang.h object.h mapping.h main.h interpret.h instrs.h exec.h \
    datatypes.h backend.h array.h my-alloca.h driver.h smalloc.h sent.h \
    lang.h port.h machine.h config.h hosts/amiga/patchfloat.h

backend.o : wiz_list.h swap.h stralloc.h smalloc.h simulate.h rxcache.h \
    regexp.h object.h my-alloca.h mapping.h main.h lex.h interpret.h \
    gcollect.h filestat.h exec.h ed.h comm.h call_out.h array.h backend.h \
    hosts/amiga/nsignal.h driver.h datatypes.h sent.h instrs.h port.h \
    machine.h config.h hosts/amiga/patchfloat.h

call_out.o : wiz_list.h stralloc.h simulate.h object.h main.h interpret.h \
    gcollect.h exec.h comm.h closure.h backend.h array.h call_out.h \
    driver.h smalloc.h sent.h instrs.h datatypes.h port.h machine.h \
    config.h hosts/amiga/patchfloat.h

closure.o : switch.h simul_efun.h simulate.h stralloc.h prolang.h object.h \
    main.h lex.h instrs.h interpret.h exec.h array.h closure.h my-alloca.h \
    driver.h sent.h smalloc.h lang.h datatypes.h port.h machine.h config.h \
    hosts/amiga/patchfloat.h

comm.o : util/erq.h wiz_list.h stralloc.h simulate.h sent.h object.h main.h \
    interpret.h gcollect.h filestat.h exec.h ed.h backend.h array.h \
    access_check.h comm.h hosts/amiga/nsignal.h telnet.h my-alloca.h \
    driver.h smalloc.h instrs.h datatypes.h config.h port.h machine.h \
    hosts/amiga/patchfloat.h

dumpstat.o : smalloc.h simulate.h prolang.h object.h mapping.h instrs.h \
    interpret.h filestat.h exec.h comm.h array.h dumpstat.h driver.h \
    datatypes.h sent.h lang.h port.h machine.h config.h \
    hosts/amiga/patchfloat.h

ed.o : stralloc.h simulate.h rxcache.h regexp.h object.h main.h interpret.h \
    gcollect.h filestat.h comm.h closure.h ed.h driver.h smalloc.h sent.h \
    instrs.h exec.h datatypes.h port.h machine.h config.h \
    hosts/amiga/patchfloat.h

gcollect.o : wiz_list.h swap.h stralloc.h smalloc.h simul_efun.h simulate.h \
    sent.h rxcache.h prolang.h otable.h object.h mapping.h main.h lex.h \
    instrs.h interpret.h filestat.h exec.h ed.h comm.h closure.h call_out.h \
    backend.h array.h gcollect.h driver.h datatypes.h regexp.h lang.h \
    port.h machine.h config.h hosts/amiga/patchfloat.h

hash.o : hash.h

interpret.o : wiz_list.h switch.h swap.h sprintf.h smalloc.h stralloc.h \
    simul_efun.h simulate.h sent.h random.h prolang.h parse.h otable.h \
    object.h mapping.h main.h lex.h instrs.h gcollect.h exec.h ed.h comm.h \
    closure.h call_out.h backend.h array.h interpret.h my-rusage.h \
    my-alloca.h driver.h datatypes.h lang.h port.h machine.h config.h \
    hosts/amiga/patchfloat.h

lang.o : wiz_list.h switch.h swap.h stralloc.h simul_efun.h simulate.h \
    object.h mapping.h main.h lex.h instrs.h interpret.h gcollect.h exec.h \
    closure.h backend.h array.h prolang.h my-alloca.h driver.h smalloc.h \
    sent.h datatypes.h lang.h port.h machine.h config.h \
    hosts/amiga/patchfloat.h

lex.o : efun_defs.c hosts/amiga/socket.h stralloc.h simul_efun.h simulate.h \
    prolang.h patchlevel.h main.h instrs.h hash.h gcollect.h filestat.h \
    exec.h comm.h closure.h array.h lex.h my-alloca.h driver.h \
    hosts/amiga/socket_sim.h hosts/amiga/socket_tcp.h smalloc.h object.h \
    interpret.h sent.h lang.h datatypes.h port.h machine.h config.h \
    hosts/amiga/socket_sim_protos.h hosts/amiga/patchfloat.h

main.o : wiz_list.h swap.h stralloc.h simul_efun.h simulate.h rxcache.h \
    random.h patchlevel.h otable.h object.h mapping.h lex.h interpret.h \
    gcollect.h filestat.h comm.h array.h backend.h main.h \
    hosts/amiga/socket.h my-alloca.h driver.h exec.h smalloc.h sent.h \
    instrs.h regexp.h datatypes.h hosts/amiga/socket_sim.h \
    hosts/amiga/socket_tcp.h port.h machine.h config.h \
    hosts/amiga/socket_sim_protos.h hosts/amiga/patchfloat.h

make_func.o : interpret.h hash.h exec.h my-alloca.h driver.h datatypes.h \
    port.h machine.h config.h hosts/amiga/patchfloat.h

mapping.o : wiz_list.h stralloc.h smalloc.h simulate.h regexp.h object.h \
    main.h interpret.h gcollect.h backend.h array.h mapping.h my-alloca.h \
    driver.h datatypes.h sent.h instrs.h exec.h port.h machine.h config.h \
    hosts/amiga/patchfloat.h

object.o : wiz_list.h swap.h stralloc.h simulate.h sent.h random.h \
    prolang.h otable.h mapping.h main.h interpret.h filestat.h exec.h \
    comm.h closure.h backend.h array.h object.h my-alloca.h driver.h \
    smalloc.h instrs.h lang.h datatypes.h port.h machine.h config.h \
    hosts/amiga/patchfloat.h

otable.o : simulate.h object.h interpret.h hash.h gcollect.h comm.h \
    otable.h driver.h sent.h instrs.h exec.h datatypes.h port.h machine.h \
    config.h hosts/amiga/patchfloat.h

parse.o : wiz_list.h stralloc.h simulate.h object.h main.h instrs.h \
    interpret.h closure.h array.h parse.h driver.h smalloc.h sent.h exec.h \
    datatypes.h port.h machine.h config.h hosts/amiga/patchfloat.h

parse_old.o : wiz_list.h simulate.h random.h object.h main.h interpret.h \
    array.h parse.h driver.h sent.h instrs.h exec.h datatypes.h smalloc.h \
    port.h machine.h config.h hosts/amiga/patchfloat.h

port.o : hosts/crypt.c main.h backend.h my-rusage.h driver.h interpret.h \
    object.h port.h machine.h config.h datatypes.h exec.h \
    hosts/amiga/patchfloat.h

random.o : random.h driver.h port.h machine.h config.h \
    hosts/amiga/patchfloat.h

regexp.o : regexp.h driver.h port.h machine.h config.h \
    hosts/amiga/patchfloat.h

rxcache.o : stralloc.h smalloc.h regexp.h hash.h gcollect.h comm.h \
    rxcache.h driver.h datatypes.h object.h interpret.h exec.h sent.h \
    port.h machine.h config.h hosts/amiga/patchfloat.h

simul_efun.o : swap.h stralloc.h simulate.h prolang.h parse.h object.h \
    lex.h instrs.h interpret.h gcollect.h exec.h array.h simul_efun.h \
    my-alloca.h driver.h smalloc.h sent.h lang.h datatypes.h port.h \
    machine.h config.h hosts/amiga/patchfloat.h

simulate.o : wiz_list.h swap.h stralloc.h simul_efun.h sent.h rxcache.h \
    prolang.h otable.h object.h mapping.h main.h lex.h instrs.h interpret.h \
    filestat.h exec.h ed.h dumpstat.h comm.h closure.h call_out.h backend.h \
    array.h simulate.h hosts/amiga/nsignal.h my-alloca.h driver.h smalloc.h \
    regexp.h lang.h datatypes.h port.h machine.h config.h \
    hosts/amiga/patchfloat.h

smalloc.o : object.h exec.h simulate.h main.h gcollect.h backend.h comm.h \
    smalloc.h driver.h interpret.h sent.h instrs.h datatypes.h port.h \
    machine.h config.h hosts/amiga/patchfloat.h

sprintf.o : swap.h stralloc.h simul_efun.h simulate.h sent.h prolang.h \
    object.h main.h instrs.h interpret.h exec.h array.h sprintf.h driver.h \
    smalloc.h lang.h datatypes.h port.h machine.h config.h \
    hosts/amiga/patchfloat.h

stralloc.o : simulate.h hash.h gcollect.h comm.h stralloc.h driver.h sent.h \
    object.h instrs.h interpret.h exec.h smalloc.h port.h machine.h \
    config.h datatypes.h hosts/amiga/patchfloat.h

swap.o : hosts/amiga/socket.h wiz_list.h stralloc.h simul_efun.h simulate.h \
    prolang.h object.h mapping.h main.h interpret.h gcollect.h exec.h \
    comm.h array.h swap.h driver.h hosts/amiga/socket_sim.h \
    hosts/amiga/socket_tcp.h smalloc.h sent.h instrs.h lang.h datatypes.h \
    port.h machine.h config.h hosts/amiga/socket_sim_protos.h \
    hosts/amiga/patchfloat.h

wiz_list.o : stralloc.h object.h main.h interpret.h gcollect.h backend.h \
    array.h wiz_list.h driver.h smalloc.h exec.h datatypes.h instrs.h \
    port.h machine.h config.h hosts/amiga/patchfloat.h

# --- DO NOT MODIFY THIS LINE -- AUTO-DEPENDS PRECEDE ---

----- And here's the machine.h -----

/* machine.h.  Generated automatically by configure.  */
#ifndef MACHINE_H
#define MACHINE_H

/* Define if using alloca.c.  */
/* #undef C_ALLOCA */

/* Define to one of _getb67, GETB67, getb67 for Cray-2 and Cray-YMP systems.
   This function is required for alloca.c support on those systems.  */
/* #undef CRAY_STACKSEG_END */

/* Define if you have dirent.h.  */
#define DIRENT 1

/* Define if you have alloca.h and it should be used (not Ultrix).  */
#define HAVE_ALLOCA_H 1

/* Define as __inline if that's what the C compiler calls it.  */
/* #undef inline */

/* Define if you don't have dirent.h, but have ndir.h.  */
/* #undef NDIR */

/* Define to `int' if <sys/types.h> doesn't define.  */
/* #undef pid_t */

/* Define as the return type of signal handlers (int or void).  */
#define RETSIGTYPE void

/* Define to `unsigned' if <sys/types.h> doesn't define.  */
/* #undef size_t */

/* If using the C implementation of alloca, define if you know the
   direction of stack growth for your system; otherwise it will be
   automatically deduced at run-time.
	STACK_DIRECTION > 0 => grows toward higher addresses
	STACK_DIRECTION < 0 => grows toward lower addresses
	STACK_DIRECTION = 0 => direction of growth unknown
 */
/* #undef STACK_DIRECTION */

/* Define if you have the ANSI C header files.  */
#define STDC_HEADERS 1

/* Define if you don't have dirent.h, but have sys/dir.h.  */
/* #undef SYSDIR */

/* Define if you don't have dirent.h, but have sys/ndir.h.  */
/* #undef SYSNDIR */

/* Define if the closedir function returns void instead of int.  */
/* #undef VOID_CLOSEDIR */

/* Is the library function inet_ntoa() compatible with the compiler ? */
#define INET_NTOA_OK 1

/* The following values must be evaluable by the preprocessor */
#define SIZEOF_P_INT 8
#define SIZEOF_INT 4
#define SIZEOF_LONG 8

/* A mask that allows to extract an unsigned char from a signed */
#define CHARBIT_MASK 0xff

#define RENAME_HANDLES_DIRECTORIES 1

/* Does the system have a getrusage call?  */
#define HAVE_GETRUSAGE 1
/* If so, is it restricted to user and system time? */
/* #undef GETRUSAGE_RESTRICTED */
/* Is it available as a subfunction of syscall() ? */
/* #undef GETRUSAGE_VIA_SYSCALL */
/* Can ru_utime / ru_stime be accessed as a timeval with tv_sec and tv_usec ? */
#define RUSAGE_USEC 1

/* the atari strtol() used to consider characters '9' < c < 'A' to be numeric */
/* #undef STRTOL_BROKEN */

/* does the libc consider it normal to free a null pointer? */
#define FREE_NULL_POINTER 1

/* needs the first argument of strtol be declared as const ? */
#define STRTOL_CONST_CHARP 1

/* Define if you have bcopy, and it handles overlapping ranges correctly. */
#define OVERLAPPING_BCOPY 1

#define MALLOC_ALIGN 8

/* does the compiler know of a 'long long' type? */
#define HAVE_LONG_LONG 1

/* what kind of pointer is used by malloc() et al */
#define POINTER void *
#define FREE_RETURNS_VOID 1

/* can we define our own malloc() safely? */
#define SBRK_OK 1

/* The following is needed for smalloc without SBRK_OK to use memory
 * efficiently. smalloc will malloc blocks that are a large power of
 * two, minus EXTERN_MALLOC_OVERHEAD. If you have no idea what number to
 * choose, compile & run util/overhead.c
 */
#define EXTERN_MALLOC_OVERHEAD 8

/* How to set a socket non-blocking */
#define USE_IOCTL_FIONBIO 1
#define USE_FCNTL_O_NDELAY 1
#define USE_FCNTL_FNDELAY 1

/* #undef inline */

/* A host specific include file.  */
#define HOST_INCLUDE "hosts/unix.h"

/* Define if you have _crypt.  */
/* #undef HAVE__CRYPT */

/* Define if you have bzero.  */
/* #undef HAVE_BZERO */

/* Define if you have crypt.  */
#define HAVE_CRYPT 1

/* Define if you have fchmod.  */
#define HAVE_FCHMOD 1

/* Define if you have fcntl.  */
#define HAVE_FCNTL 1

/* Define if you have getcwd.  */
#define HAVE_GETCWD 1

/* Define if you have getrusage.  */
#define HAVE_GETRUSAGE 1

/* Define if you have gettimeofday.  */
#define HAVE_GETTIMEOFDAY 1

/* Define if you have memcpy.  */
#define HAVE_MEMCPY 1

/* Define if you have memmem.  */
/* #undef HAVE_MEMMEM */

/* Define if you have memmove.  */
#define HAVE_MEMMOVE 1

/* Define if you have memset.  */
#define HAVE_MEMSET 1

/* Define if you have strchr.  */
#define HAVE_STRCHR 1

/* Define if you have strcspn.  */
#define HAVE_STRCSPN 1

/* Define if you have strrchr.  */
#define HAVE_STRRCHR 1

/* Define if you have sysconf.  */
#define HAVE_SYSCONF 1

/* Define if you have wait3.  */
#define HAVE_WAIT3 1

/* Define if you have waitpid.  */
#define HAVE_WAITPID 1

/* Define if you have the <bstring.h> header file.  */
/* #undef HAVE_BSTRING_H */

/* Define if you have the <crypt.h> header file.  */
#define HAVE_CRYPT_H 1

/* Define if you have the <libc.h> header file.  */
/* #undef HAVE_LIBC_H */

/* Define if you have the <memory.h> header file.  */
#define HAVE_MEMORY_H 1

/* Define if you have the <netdb.h> header file.  */
#define HAVE_NETDB_H 1

/* Define if you have the <stdlib.h> header file.  */
#define HAVE_STDLIB_H 1

/* Define if you have the <string.h> header file.  */
#define HAVE_STRING_H 1

/* Define if you have the <sys/param.h> header file. */
#define HAVE_SYS_PARAM_H 1

/* Define if you have the <sys/rusage.h> header file.  */
/* #undef HAVE_SYS_RUSAGE_H */

/* Define if you have the <sys/termios.h> header file.  */
#define HAVE_SYS_TERMIOS_H 1

/* Define if you have the <sys/time.h> header file.  */
#define HAVE_SYS_TIME_H 1

/* Define if you have the <unistd.h> header file.  */
#define HAVE_UNISTD_H 1

/* Define if you have the <values.h> header file.  */
#define HAVE_VALUES_H 1

/* Define if you have the crypt library (-lcrypt).  */
/* #undef HAVE_LIBCRYPT */

/* Define if you have the m library (-lm).  */
#define HAVE_LIBM 1

/* Define if you have the nsl library (-lnsl).  */
/* #undef HAVE_LIBNSL */

/* Define if you have the socket library (-lsocket).  */
/* #undef HAVE_LIBSOCKET */

/* Define if you have the ucb library (-lucb).  */
/* #undef HAVE_LIBUCB */

#endif /* MACHINE_H */

--- Full log of the bootrun ---

Script started on Wed Mar 24 18:53:45 1999
alex@dec> ./configure
checking for gcc/assembler float/branch incompatibility, e.g. on AIX
checking for install
checking for byacc
checking how to run the C preprocessor
checking for sys/rusage.h
checking for sys/time.h
checking for unistd.h
checking for stdlib.h
checking for libc.h
checking for memory.h
checking for values.h
checking for string.h
checking for bstring.h
checking for netdb.h
checking for crypt.h
checking for sys/param.h
checking for sys/termios.h
checking for ANSI C header files
checking for directory library header
checking for dirent.h
checking for closedir return value
checking for sizeof(char *) == 4
checking for sizeof(char *) == 8
checking for sizeof(int) == 2
checking for sizeof(long) == 8
checking for needed malloc() alignment
checking for long long
checking for inline
checking for size_t in sys/types.h
checking for pid_t in sys/types.h
checking for return type of signal handlers
checking for -lm
checking for -lsocket
checking for -lucb
checking for -lcrypt
checking for working alloca.h
checking for alloca
checking for fchmod
checking for getrusage
checking for bzero
checking for memset
checking for memcpy
checking for memmem
checking for strcspn
checking for crypt
checking for _crypt
checking for strchr
checking for strrchr
checking for getcwd
checking for memmove
checking for sysconf
checking for gettimeofday
checking for wait3
checking for waitpid
checking for fcntl
rename ok
checking for full availability of struct rusage members
checking for struct rusage timeval members with tv_usec
checking for return type of free
checking for void* or char* from malloc
checking for CHARBITS == 8 or undef
checking for strtol prototype
medium optimization CFLAGS: -O4 -g -fstrength-reduce -fno-force-mem -fno-force-addr -fno-inline-functions
highest optimization CFLAGS: -O4 -g -fstrength-reduce -fno-force-mem -fno-force-addr -fno-inline-functions -fomit-frame-pointer
checking if yacc includes bogus malloc prototypes
checking for yacc / <malloc.h> / -DSGI_SOURCE / afree name clash
checking malloc redefinition with linking flag 
Redefinition of malloc() 100.000000% successful
checking malloc overhead
creating config.status
creating Makefile
creating machine.h
machine.h is unchanged
