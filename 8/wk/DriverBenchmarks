Subject: Driver Benchmarks (war: Re: MUDLibs)
From: Jehuda <jehuda@my-dejanews.com>
Date: 22 Aug 1998 06:17:34 GMT
Organization: HRZ Uni Marburg
X-Mailer: Mozilla 3.01 (WinNT; I)

Lars Duning wrote:
> 
> B. Roessner wrote:
> >
> > Michael Wilk wrote:
...
> >
> > Dennoch sollte man das kritisch tun. Der von LIMA verwendete MUDOS
> > Driver hat geringfuegige Vorteile in der Rechengeschwindigkeit
> 
> Hat eigentlich mal jemand gemessen, um wieviel er schneller ist, und
> woran das liegt?
Die Entwickler von MUDOS versichern glaubhaft, dass _leere_ Loops unter
MUDOS um den Faktor 20 schneller laufen (nicht das dies wirklich
relevant waere...)
Ansonsten wurden fuer MUDOS einige Efuns, sowie die Behandlung von
Closures und Mappings neu geschrieben. Dabei wurden die gaengigen
Kriterien fuer guten Programmierstil und Optimierung meist ordentlich
verwendet. Ich schätze aus Erfahrung das Potential solcher Manoever
im Bereich von 5-10% Geschwindigkeitsgewinn ein. Aehnliche Werte wurden
wohl vor Jahren auch bei der Umstellung von Nightmare-Derivaten auf
MUDOS behauptet, waehrend z.B. Heaven7 unter MUDOS langsamer gelaufen 
sein soll. (gibt es sonst noch Libs, die in halbwegs vergleichbarer Form
je fuer beide Systeme vorgelegen haben?)
MUDOS enthaelt einige Unterstuetzung fuer bestimmte
Zentralparserfunktionen, so dass LIMA, dass intensiv auf diese
Funktionen zugeschnitten ist, wohl mit Amylaar nur deutlich langsamer
realisierbar waere.

Insgesamt halte ich die reine CPU-Belastung heutzutage fuer weitgehend
irrelevant. Schon mit 80386 Prozessoren gab es MUDs mit ueber 200
Spielern, und trotz der vervielfachten Rechenpower gibt es auch heute
kaum MUDs mit mehr Spielern gleichzeitig.
Das verhasste Lag kommt also ganz ueberwiegend vom Networking und von
Plattenzugriffen.

Allerdings gibt es eine kleine Ausnahme: Sowohl bei Amylaar als auch
bei MUDOS scheint das Objekt-Memory Management eine Schwachstelle zu
sein. Bei raschem Touching von sehr vielen Objekten hintereinander
kommt es zu einem dramatischen, nichlinearen(!) Anstieg der Rechenzeit.
Dass man schon mit einem relativ harmlosen Wegescipt richtig uebel Lag
produzieren kann, wenn man damit in eine ungeladene Gegend rennt,
ist wegen der Plattenzugriffe klar.
 Aber selbst bei bereits geladenen Objekten nimmt die Effektive CPUzeit
nach etwa 400 Objekten radikal nichtlinear zu. (Das Phaenomen tauchte
im Zusammenhang mit rekursiv arbeitenden Wegfinde- oder Maptools auf.
Getestet hatte ich es vor laengerem unter DOS mit einem 486er, trat aber
gleichermassen unter UNIX auf.)
Vielleicht hat ja mal jemand Lust, auf einem aktuellen System eine
Messreihe aufzunehmen?
