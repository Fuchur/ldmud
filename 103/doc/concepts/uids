CONCEPT
	uids (userids)

DESCRIPTION
        Every object in the mud is attributed with a user-id 'uid': a string
        which associates the object with a certain 'user' (aka 'wizard' or
        'creator', though it is not limited to that). The uid can be 0, too.

        The uid serves a dual purpose: on the on hand it is used to gather
        statistics about the various groups of objects, on the other hand
        the uid can come in handy in the implementation of security systems.

        The uid of an object is assigned at its creation through the
        driver hooks H_LOAD_UIDS for loaded objects, and H_CLONE_UIDS
        for cloned objects, and can't be changed afterwards.

        The uid of an object can be queried with the efun getuid() (resp.
        creator() in compat-mode).
        

        Every object also has a second string attribute, the 'effective
        userid' or 'euid', which also may be 0. This value was intended to
        implement a security system based on difference between theoretical
        and effective permissions. Since the effectiveness of this system is
        doubtful, the driver enforces such a use only as an option.

        As uids, euids are assigned at an objects creation through
        the two aformentioned driverhooks. They can be queried with
        the efun geteuid() and changed with the efun seteuid(). Calls
        to the latter are verified by the master lfun valid_seteuid().

        Additionally objects can impose their uid onto an other objects
        euid with the efun export_uid().


        If the driver is run in 'strict euids' mode, euids are taken
        more seriously than being just another attribute:
          - all objects must have a non-0 uid.
          - objects with a 0 euid can't load or clone other objects.
          - the backbone uid as returned by master::get_bb_uid() must
            not be 0.

SEE ALSO
	native(C), get_bb_uid(M), valid_seteuid(M),
	objects(C), clone_object(E), geteuid(E), getuid(E), seteuid(E)
