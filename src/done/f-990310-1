Short: New efun m_add()
From: Lars, Rodney
Date: 990310
Type: Feature
State: Done - implemented in 3.2.9

m_add(m, key, data...) in addition to m + ([ ])

> --------------------------------<7>---------------------------------------
> As you can see, adding an empty mapping to a mapping variable when
> using the '+=' operator, does NOT cause the mapping to be copied.
> However, using the same operator for an array does.

True, this behaviour is not overly consistent and partly so for historical
reasons. However, the other part is that arrays and mappings are
fundamentally different entities: if b is an array, and m a mapping

     b + ({ 4 }) not <=> b[0] = 4
but
     m + ([ 0:4 ]) is <=> m[0] = 4

And of course the implementation is completely different.
>
> This does not seem consistent, especially if consider that when
> you use the '+' operator instead in Routine 1 i.e.
>
>     b=b+([ ]);      instead of    b+=([ ]);

>
> the two routines behave the same i.e. the second variable copies the
> contents of the first mapping, and the original contents are unchanged.
> Thus the routine returns as you would expect:
>
>     ([
>       "c": 3,
>       "a": 1,
>       "b": 2,
>     ])
>
> Of course, modifying the '+=' operator, so that it extends a copy of the
> contents of the mapping would upset some existing MUDs, not least our own.
> It would also probably take up more processing time and memory, because you
> would have to copy the contents each time, rather than just extend them.
>
> But perhaps, this is a small price to pay for having a consistent system.
> You could also add an add_mapping() efun to extend a mapping's contents,
> without copying it. You could also add an add_array() efun to extend an
> array, without copying it.

