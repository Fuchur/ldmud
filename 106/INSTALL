TODO: This file needs a serious rewrite.

This is a brief description of how to install LPmud 3.2 on a unix host.
For other hosts, improvise and/or look for README files in the
src/hosts/... directories.

After you unpacked, you will have a directory 'ldmud-xxx' containing the
subdirectories 'doc' and 'src' (at least). Add two more subdirectories
'bin' and 'lib'.

cd to src. execute ./configure . This will check for a number of site
specific settings, and can take about a minute or two.
For NeXT-Step 2.1, supply --with-target=NeXT .

Edit the Makefile, defining where the lib and bin is. Check definitions
in config.h, most are probably good as they are. The ones that are
important wrt. which mudlibs can be run are COMPAT_MODE NATIVE_MODE
OLD_PREVIOUS_OBJECT_BEHAVIOUR OLD_EXPLODE_BEHAVIOUR INITIALIZATION_BY___INIT
You get the most 2.4.5 compatibility if you define all of these but
NATIVE_MODE . Likewise, you get the most 3.0 compatibility when you define
all but COMPAT_MODE. The most interesting configuration is probably not
to set any of these.

Do 'make install' and 'make install-utils'.

Get a mudlib. One way to do this is to get the source to 2.4.5, which includes
a mudlib in the directory 'mudlib'. Copy all those files into your 'lib'
directory (and make sure that the files from 'mudlib/sys' go into your lib's
include directory, usually 'lib/sys').  To make file access from within the
game work properly, you have to apply 2.4.5-player.c-diff from src/mudlib
to lib/obj/player.c .

Copy the file src/mudlib/master.c to lib/obj/master.c (in COMPAT_MODE),
otherwise to lib/secure/master.c. Copy the file src/mudlib/simul_efun.c
to where it is supposed to be. That is defined by the function
get_simul_efun in master.c.

Test the game with 'driver &'.

If you see the message 'Setting up ipc', then you are up and running.
Test with 'telnet localhost 4242' ; that is, when you change the port
number in config.h , the changed number does apply.


Windows 95/98/NT
----------------

  To compile the gamedriver for Windows, you need the 'Cygwin' package,
  which is a port of gcc, bash, and other GNU/Unix programs. Once it
  is installed and running, the procedure is the same as under Unix.

  CygWin is available from <URL:http://sourceware.cygnus.com/cygwin/>,
  and the homepage is <URL:http://www.cygnus.com/>.

  One common pitfall is that the installation does not create the '/bin'
  directory in which the CygWin executables are expected. A typical
  error message would be 'make: /bin/sh not found'.

  Solution 1: Create a directory 'bin' in your search path (e.g. c:\bin)
    and copy all required executables (in this case 'sh.exe') into
    that directory.

  Solution 2 (this can be done in a script): cd into the directory
    where the executables are stored, e.g.
    /compiler/Cygnus/B19/H-i386-cygwin32/bin . In this directory, give
    the command 'mount $PWD /bin'.

