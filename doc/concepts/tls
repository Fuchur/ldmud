CONCEPT
        tls (transport layer security)

DESCRIPTION
	TLS stands for Transport Layer Security which is the successor
	of the well known SSL (Secure Socket Layer). Both techniques 
	provide a way to authenticate and encrypt the data send through
	a network connection.
	By enabling TLS during compilation of the driver you can provide
	a secure channel into the mud to your players.
	In difference to other solutions as "sslwrap" or "stunnel" the
	driver integrated approach has the advantage that the mud sees 
	the real IP of the player, not the IP of the local mud host.

USAGE
	To use TLS configure your driver with --enable-tls option.
	After starting your driver you have five new efuns
	(tls_init_connection(), tls_deinit_connection(), tls_error(),
	 tls_query_connection_info(), tls_query_connection_state()).

	You can switch on TLS by calling tls_init_connection().
	This can happen on two points:
	1) In telnet_neg()
	2) In master_ob->connect()
	
	Advantage of way 1) is that you can offer TLS on a normal 
	mud port. If you have a limited number of ports this can 
	become important. The TLS connection will be started by 
	the client with help of telnet option STARTTLS. Currently
	there are no mudclients that support this method.
	
	Advantage of way 2) is that your users can connect with
	any program that supports TLS/SSL. Examples are telnet-ssl,
	sslwrap or stunnel. Disadvantage is that you have to spend
	a dedicated port for this.
	
	For 1) you have to implement the telnet option STARTTLS (46).
	Look here for a draft: 
	http://www.ietf.org/proceedings/99mar/I-D/draft-ietf-tn3270e-telnet-tls-01.txt
	Call tls_init_connection() to initiate the TLS handshake.

	For 2) you have to call tls_init_connection() as first command
	after the player connected (normally in master_ob->connect())

BUGS
        So far, only GnuTLS is supported, but not OpenSSL.

SEE ALSO
        tls_* efuns
