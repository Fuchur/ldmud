A short introduction to the mySQL-support
by Karm@Nightfall

Send bug-reports and suggestions only to karm@goefp.de

                                     ----

Before trying to do anything with the mySQL-support, you should have the
following things done:
   1. Have a mySQL-server set up and ready for connections
   2. Know the basic SQL-commands
If your mySQL-server is set up and you gave username and password for
connections, the first thing you need to do is change username and password
in the efuns.c file. The reason is that db_connect() does not accept
username and password, because it would be a great security-leak.
The line you need to change is the one with the call to mysql_real_connect().
Change the two zeros after "localhost" to username and password (in the
same order). If you set up the mySQL-server without any password, just
replace the password with a zero and if you didn't give a username
either, don't touch efuns.c at all.

The idea behind SQL-support is that you can swap large amounts of data
into a database where it can be accessed very easily. As mySQL "limits" the
number of connections to 100 and as every connection to the mySQL-server
takes time, you should use database-servers in your MUD which constantly
keep the connection to the mySQL-server.

To connect to your mySQL-server, use the efun db_connect(). It takes only
one argument which is the name of the database. If you haven't created any
database yet, use mysqladmin and read the man-pages about it to do so.
The return-value of db_connect() is an integer representing the unique
handle to the database with which you will identify your connection later.
To sebd or retrieve data from this connection, use db_exec(). The first
parameter for all efuns dealing with an open connection is always the
handle and so is the first argument the handle and the second one the
command you want to issue. The return-value is either 0 if there was an
error in your command (this can have various reasons), otherwise your
handle is returned again. A typical SQL-statement to retrieve data would
be like this:
        select aliases.command from aliases where (name = 'mario' AND
        alias regexp 'l.*')
As you know, mySQL accepts either " or ' to classify strings for parameters.
Most likely, you will pass variables and don't know whether they contain
one or more of these key-chars (or even other chars that need to be
converted). mySQL provides a function for converting just any string into
an acceptable argument and this is implemented in db_conv_string().
So the above example with variables looks like this:
        select aliases.command from aliases where (name ='"+
        db_conv_string(name)+"' AND alias regexp '"+
        db_conv_string(mask)+"')
I left out the db_exec()-stuff, more complete examples will follow.
After you initiated a statement that should return rows from the database,
use db_fetch() to retrieve the data. db_fetch() returns the data row
by row and not all at once. You need to call it until it returns 0.
If you used a DELETE- or UPDATE-statement, you cannot call db_fetch(),
but you might be interested in the number of deleted/changed rows which can
be queried with db_affected_rows().

After all operations are done in the database, you should use db_close()
to close the connection again. If you are using a database-server-concept,
place it in the remove()-function.

An example of a server for aliases could look like this:

-----------------------------------------------------------------------------
/*
**  CREATION:
**
**  create table aliases (
**      name varchar(15) not NULL,
**      alias varchar(20) not NULL,
**      command varchar(255) not NULL,
**      primary key (name, alias));
*/


#define DATABASE "mud"

private int handle;

public void create()
{
    handle = db_connect(DATABASE);
}

public int remove()
{
    if ( handle )
        db_close(handle);
    destruct(ME);
    return !ME;
}

public int AddAlias(string alias, string command, object ob)
{
    if ( !handle )
        handle = db_connect(DATABASE);
    if ( !db_exec(handle,
                  "insert into aliases (name, alias, command) values "
                  "('" + getuid(ob) + "','" + db_conv_string(alias) + "','"+
                  db_conv_string(command) + "')") )
        return -1;
    return 1;
}

public int RemoveAlias(string alias, object ob)
{
    int res;

    if ( !handle )
        handle = db_connect(DATABASE);
    res = db_exec(handle,
                  "delete from aliases where (name = '"+
                  getuid(ob) + "' AND alias = '" + db_conv_string(alias)+
                  "')");
    if ( !res )
        return 0;
    res = db_affected_rows(handle);
    return (res > 0)?1:-1;
}

public mixed *QueryAliases(string mask, object ob)
{
    mixed *result;
    string *tmp;

    if ( !handle )
        handle = db_connect(DATABASE);
    if ( !db_exec(handle,
                  "select aliases.alias, aliases.command from aliases where "
                  "(name = '" + getuid(ob)+
                  "' AND alias regexp '" + db_conv_string(mask) + "')") )
        return ({ });
    result = ({ });
    while ( sizeof(tmp = db_fetch(handle)) )
        result += ({ tmp });
    return result;
}

public string QueryAlias(string alias, object ob)
{
    mixed *result;
    string *tmp;

    if ( !handle )
        handle = db_connect(DATABASE);
    if ( !db_exec(handle,
                  "select aliases.command from aliases where "
                  "(name = '" + getuid(ob)+
                  "' AND alias = '" + db_conv_string(alias) + "')") )
        return 0;
    result = ({ });
    while ( sizeof(tmp = db_fetch(handle)) )
        result += tmp;
    return sizeof(result)?result[0]:0;
}
-----------------------------------------------------------------------------

This is just an example which had to be small and easy to understand, don't
hesitate to improve this. It is important that you call EVERY db_fetch()
until it returns 0, it can lead to seriuos inconsistencies (which is why
I suggest you not to make this efuns available from just any file in you
MUD) if you don't.

The SQL-efuns have some built-in optimization-features to speed up often
used connections. To get a list of all open connections to the mySQL-
server, use db_handles() which returns an array of integers with all open
handles.
