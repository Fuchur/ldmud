SYNOPSIS
        Regular Expressions


DESCRIPTION
        LDMud supports both the traditional regular expressions as
        implemented by Henry Spencer, and the Perl-compatible regular
        expressions by Philip Hazel.  The selection is made at the time the
        driver is compiled.

        The packages differ in the expressivity of their expressions,
        though they both implement the common subset outlined below.

        All regular expression efuns take an additional options parameter,
        which is a an number composed of bitflags, and is used to modify
        the exact behaviour of the expression evaluation. In addition,
        certain efuns may accept additional specific options.

        For details, refer to the detailed manpages: hsregexp(C) for the
        Henry Spencer package, pcre(C) for the PCRE package.


REGULAR EXPRESSION DETAILS
        A regular expression is a pattern that is matched against  a
        subject string from left to right. Most characters stand for
        themselves in a pattern, and match the corresponding charac-
        ters in the subject. As a trivial example, the pattern

          The quick brown fox

        matches a portion of a subject string that is  identical  to
        itself.  The  power  of  regular  expressions comes from the
        ability to include alternatives and repetitions in the  pat-
        tern.  These  are encoded in the pattern by the use of meta-
        characters, which do not stand for  themselves  but  instead
        are interpreted in some special way.

        The following metacharacters are 'universal' in that both regexp
        packages understand them in the same way:

          .       Match any character.

          ^       Match begin of line.

          $       Match end of line.

          x|y     Match regexp x or regexp y.

          ()      Match enclosed regexp like a 'simple' one.

          x*      Match any number (0 or more) of regexp x.

          x+      Match any number (1 or more) of regexp x.

          [..]    Match one of the characters enclosed.

          [^ ..]  Match none of the characters enclosed. The .. are to
                  replaced by single characters or character ranges:

          [abc]   matches a, b or c.

          [ab0-9] matches a, b or any digit.

          [^a-z]  does not match any lowercase character.

          \c      match character c even if it's one of the special
                  characters.


OPTIONS
        Henry Spencer regular expressions understand one option:

          RE_EXCOMPATIBLE


        PCRE understands these options:

          RE_ANCHORED
          RE_CASELESS
          RE_DOLLAR_ENDONLY
          RE_DOTALL
          RE_EXTENDED
          RE_MULTILINE
          RE_UNGREEDY
          RE_NOTBOL
          RE_NOTEOL
          RE_NOTEMPTY

SEE ALSO
        hsregexp(C), pcre(C), regexp(E), regexplode(E), regmatch(E),
        regreplace(E)
